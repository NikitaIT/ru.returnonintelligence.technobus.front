"use strict";

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Модуль работы с гугл таблицами
 */
$(function googleApi() {
	var GoogleSpreadsheet = function () {
		function GoogleSpreadsheet(key, spreadsheetId) {
			_classCallCheck(this, GoogleSpreadsheet);

			this.key = key;
			this.spreadsheetId = spreadsheetId;
		}

		_createClass(GoogleSpreadsheet, [{
			key: "load",
			value: function load(sheet, range, fun) {
				var googleUrl = "https://sheets.googleapis.com/v4/spreadsheets/" + spreadsheetId + "/values/" + sheet + "!" + range + "?key=" + key;
				console.log("get:", googleUrl);
				$.getJSON(googleUrl, fun);
			}
		}]);

		return GoogleSpreadsheet;
	}();

	var API = function () {
		function API(tableViewer, googleSpreadsheet) {
			_classCallCheck(this, API);

			this.tableViewer = tableViewer;
			this.googleSpreadsheet = googleSpreadsheet;
			if (localStorage.length == 0 || localStorage.getItem(0) == null || localStorage.getItem(1) == null) {
				this.saveToLocalStorage();
				console.log("first saveToLocalStorage()");
			} else {
				console.log("first showTimetable()");
				try {
					this.showTimetable();
				} catch (err) {
					console.error("showTimetable: ", err);
				}

				if (navigator.onLine) {
					console.log("onLine updateStorage()");
					this.updateStorage();
				};
			}
		}
		/**
   * Запрашивает с апи гугла таблицу по урлу
   * @param {string} url Адрес листа таблицы
   * @param {function} fun Что с ней делает
   */


		_createClass(API, [{
			key: "googleSpreadsheetLoad",
			value: function googleSpreadsheetLoad(sheet, range, fun) {
				this.googleSpreadsheet.load(sheet, range, function (result) {
					console.log("\u0417\u0430\u0433\u0440\u0443\u0436\u0435\u043D \u043E\u0431\u044C\u0435\u043A\u0442:", result);
					fun(result);
				});
			}
			/**
    * Сохранение расписания в локальное хранилище
    */

		}, {
			key: "saveToLocalStorage",
			value: function saveToLocalStorage() {
				var _this = this;

				this.googleSpreadsheetLoad("To Technopolis", "A1:H100", function (result) {
					console.log(result);
					localStorage.setItem(0, JSON.stringify(result));
					_this.tableViewer.addTableList(result, 0);
				});
				this.googleSpreadsheetLoad("From Technopolis", "A1:H100", function (result) {
					localStorage.setItem(1, JSON.stringify(result));
					_this.tableViewer.addTableList(result, 1);
				});
				this.googleSpreadsheetLoad("Объявления", "A1:B10", function (result) {
					_this.tableViewer.addInfoList(result);
				});
				localStorage.setItem('DATE', Date());
			}
			/**
    * Обновление
    */

		}, {
			key: "updateStorage",
			value: function updateStorage() {
				this.tableViewer.cleanTableList();
				this.saveToLocalStorage();
			}
		}, {
			key: "showTimetable",
			value: function showTimetable() {
				this.tableViewer.addTableList(JSON.parse(localStorage.getItem(0)), 0);
				this.tableViewer.addTableList(JSON.parse(localStorage.getItem(1)), 1);
			}
		}]);

		return API;
	}();

	var TableViewer = function () {
		function TableViewer(timetableRowClass, infoClass) {
			_classCallCheck(this, TableViewer);

			this.timetableRowClass = timetableRowClass;
			this.infoClass = infoClass;
		}
		/**
   * Добавляет информанию из таблицы
   * @param {object}   infoJSON  Обьект
   * @param {string} infoClass Класс в который добавляем
   */


		_createClass(TableViewer, [{
			key: "addInfoList",
			value: function addInfoList(infoJSON) {
				console.log("f: addTableList(infoJSON=", infoJSON, ", infoClass= " + this.infoClass + ")");
				var infoHtmlString = "";
				infoJSON.values.shift();
				infoJSON.values.forEach(function (msg) {
					infoHtmlString += "<p class=\"info-list--elem\">\n\t\t\t\t\t\t\t\t\t\t<span class=\"info-list--elem__title\">\n\t\t\t\t\t\t\t\t\t\t\t" + msg[0] + "\n\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t" + msg[1] + "\n\t\t\t\t\t\t\t\t\t</p>";
				});
				$(this.infoClass).append(infoHtmlString);
			}
			/**
    * Add table list in timetable
    * @param   {object} timetableJSON     Data
    * @param   {string} timetableRowClass Table DOM class
    * @param   {number} id                Table list number
    */

		}, {
			key: "addTableList",
			value: function addTableList(timetableJSON, id) {
				console.log("f: addTableList(id=" + id + ", timetableJSON=", timetableJSON, ", timetableRowClass= " + this.timetableRowClass + ")");
				var timetableRowHtmlString = "<div class=\"timetable__row__current\" id=\"route" + id + "\">";
				//console.log(JSON.stringify(timetableJSON.values));
				var timetable = timetableJSON.values;
				var timeSort = {};
				timetable.shift();
				timetable.forEach(function (mins, i) {
					var _mins$0$split = mins[0].split(':'),
					    _mins$0$split2 = _slicedToArray(_mins$0$split, 2),
					    hour = _mins$0$split2[0],
					    min = _mins$0$split2[1];

					mins.shift();
					if (timeSort[hour] == undefined) timeSort[hour] = [];
					timeSort[hour].push({ min: min, mins: mins });
				});
				function compareHour(a, b) {
					if (a.hour > b.hour) return 1;
					if (a.hour < b.hour) return -1;
				}
				function compareMin(a, b) {
					if (a.min > b.min) return 1;
					if (a.min < b.min) return -1;
				}
				//timeSort = timeSort.sort(compareHour);
				for (var i = 0; i < timeSort.length; i++) {
					timeSort[i] = timeSort[i].sort(compareMin);
				}
				//console.log(JSON.stringify(timeSort));
				for (hour in timeSort) {
					var minsHtmlString = getMinsHtmlString(hour, timeSort[hour]);
					if (minsHtmlString !== "") {
						timetableRowHtmlString += "<div class=\"timetable__row\">\n\t\t\t\t\t\t\t\t\t<div class=\"timetable__hover\">\n\t\t\t\t\t\t\t\t\t\t" + hour + "\t\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<hr class=\"line\"/>\n\t\t\t\t\t\t\t\t\t<div class=\"timetable__row--subrow\">\n\t\t\t\t\t\t\t\t\t\t" + minsHtmlString + "\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>";
					}
				}
				timetableRowHtmlString += '</div>';

				/**
     * Добавляет строку минут в таблицу
     * @param   {object} mins Массив пар (Минуты:День,Id:Часы)
     * @returns {string} Строковое представление в таблице
     */
				function getMinsHtmlString(hour, mins) {
					var minsHtmlString = "";
					mins.forEach(function (min, i) {
						minsHtmlString += "<div  class=\"timetable__min " + getDayClassName(min.mins) + "\">\n\t\t\t\t\t\t\t\t\t" + hour + ":" + min.min + "\n\t\t\t\t\t\t\t\t</div>";
					});
					return minsHtmlString;
					/**
      * Добавляет класс дня недели
      * @param   {string} tableDayName Название дня недели в таблице exel
      * @returns {string}   Класс дня недели
      */
					function getDayClassName(tableDayName) {
						//console.log(tableDayName);
						var minDaysClassNames = "";
						var daysExtendtion = [].concat(_toConsumableArray(days), ["All"]);
						for (var _i = 0; _i < tableDayName.length; _i++) {
							if (tableDayName[_i] == "") continue;
							minDaysClassNames += ' day-' + daysExtendtion[_i];
						}
						if (tableDayName.length == 5) minDaysClassNames += ' day-All';
						return minDaysClassNames;
					}
				}

				$(this.timetableRowClass).append(timetableRowHtmlString);
			}
		}, {
			key: "cleanTableList",
			value: function cleanTableList() {
				$(this.timetableRowClass).html("");
			}
		}, {
			key: "cleanInfoList",
			value: function cleanInfoList() {
				$(this.infoClass).html("");
			}
		}]);

		return TableViewer;
	}();

	;
	var url = "https://docs.google.com/spreadsheet/pub?key=1VwgzSFxVRu2Z-9tvF8wimO2m3BmuW4ngcST5uGSRYRg&output=html";
	var key = "AIzaSyC6gFH_bbSeMSIzEexKIUQ3MGE1MK2mBdo";
	var spreadsheetId = "1Xdje643qsnGXaOjU70larjh-UFTh6Bt9ii83a7t68Oo";
	var googleSpreadsheet = new GoogleSpreadsheet(key, spreadsheetId);
	var tableViewer = new TableViewer(".timetable__row__all", ".info-list");
	var apiObj = new API(tableViewer, googleSpreadsheet);
	setLanguage("ru");
});
'use strict';

/**
 * Модуль работы с датой
 */
$(function () {
	/**
  * Установка текущей даты, поиск следующей даты в таблице
  */
	function setDate() {
		var options = {
			hour: 'numeric',
			minute: 'numeric'
		};
		function getWeekDay(date) {
			return fullDays[date.getDay()];
		}
		var date = new Date();
		$(".day").attr('name', getWeekDay(date));
		$("time.current-time").html(date.toLocaleString('ru', options) + ' ');

		Number.prototype.div = function (by) {
			return (this - this % by) / by;
		};
		var minTmp = date.getMinutes();
		minTmp = minTmp >= 10 ? minTmp.div(10) + 1 + "0" : "10";
		$('.timetable__min:contains(' + date.getHours() + ':' + minTmp + ')').css('border', '2px solid green');
	}
	setDate();
	setInterval(setDate, 9000);
});
'use strict';

/**
 * Модуль карты
 * @param {object} function ( Инициализация карты
 */
$(function () {
  /**
   * Инициализация карты
   */
  function init() {
    var places = {
      metro: [59.853876, 30.321102],
      technopolis: [59.818043, 30.327938],
      metro1: [59.850127, 30.321772],
      routeCenter: [59.835681, 30.322253]
    };
    var from = places.metro,
        to = places.technopolis;
    var myMap = new ymaps.Map('map', {
      center: places.metro,
      zoom: 16
    }, {
      searchControlProvider: 'yandex#search'

    }),
        myPlacemark = new ymaps.Placemark(myMap.getCenter());

    myMap.geoObjects.add(myPlacemark);
    var myRoute = void 0;

    function addRoute(from, to) {
      ymaps.route([{
        point: from,
        type: 'viaPoint'
      }, to]).then(function (route) {
        myMap.geoObjects.add(myRoute = route);
      }, function (error) {
        console.error('Возникла ошибка: ' + error.message);
      });
    };

    var routeButton = new ymaps.control.Button('<i class="fa fa-bus" style="color: dimgray"></i>');

    routeButton.events.add('select', function () {
      addRoute(from, to);
      myMap.setZoom(12);
      myMap.setCenter(places.routeCenter);
    }).add('deselect', function () {
      myRoute && myMap.geoObjects.remove(myRoute);
    });

    myMap.controls.add(routeButton, { float: 'left', maxWidth: 'auto' });

    myPlacemark.events.add('mouseenter', function (e) {
      // Ссылку на объект, вызвавший событие,
      // можно получить из поля 'target'.
      e.get('target').options.set('preset', 'islands#greenIcon');
    }).add('mouseleave', function (e) {
      e.get('target').options.unset('preset');
    });

    function changeRoute() {
      if (routeButton.isSelected()) {
        myRoute && myMap.geoObjects.remove(myRoute);
        addRoute(from, to);
      }
    };

    $(".from_technopolis").click(function () {
      myMap.setCenter(places.technopolis);
      myPlacemark.geometry.setCoordinates(myMap.getCenter());
      from = places.technopolis;
      to = places.metro1;
      changeRoute();
      myMap.setZoom(16);
    });

    $(".to_technopolis").click(function () {
      myMap.setCenter(places.metro);
      myPlacemark.geometry.setCoordinates(myMap.getCenter());
      from = places.metro;
      to = places.technopolis;
      changeRoute();
      myMap.setZoom(16);
    });
  }

  ymaps.ready(init);
});
"use strict";

/**
 * Модуль отрисовка боковой панели 
 */
$(function () {
	(function () {
		var strDOM = "";
		days.forEach(function (day, i) {
			strDOM += "<div class=\"panel--button panel--button-" + i + " day-" + day + "\">\n\t\t\t\t\t\t<span name=\"" + day + "\"></span>\n\t\t\t\t\t</div>";
		});
		$(".panel").append(strDOM);
	})();
});
"use strict";

/**
 * Модуль установки времени показа заставки
 */
$(function () {
  // Установка времени показа заставки
  $(".preloader").delay(1000).fadeOut("slow");
});
"use strict";

/**
 * Модуль установки событий работы с свичём
 */
$(function () {
    $(".russian").button('toggle');
    $(".russian").click(function () {
        setLanguage("ru");
        $('#map').attr('lang', 'ru');
    });
    $(".russian").click();
    $(".english").click(function () {
        setLanguage("en");
        $('#map').attr('lang', 'en');
    });
    $(".lang").addClass("btn-group-vertical");
    $(".lang").removeClass("btn-group");
    $(".to_technopolis").button('toggle');
    $(".to_technopolis").click(function () {
        $("#route0").css("visibility", "visible");
        $("#route0").css("position", "initial");
        $("#route1").css("visibility", "hidden");
        $("#route1").css("position", "absolute");
    });
    $(".from_technopolis").click(function () {
        $("#route0").css("visibility", "hidden");
        $("#route0").css("position", "absolute");
        $("#route1").css("visibility", "visible");
        $("#route1").css("position", "initial");
    });
});
'use strict';

var days = ['sunday', 'monday', 'tuesday', 'tednesday', 'thursday', 'friday', 'saturday'];
var fullDays = ['fullSunday', 'fullMonday', 'fullTuesday', 'fullTednesday', 'fullThursday', 'fullFriday', 'fullSaturday'];

/**
 * Установка языка сайта
 * @param {string} lang Пользовательская локаль
 */
function setLanguage(lang) {
  $.getJSON('lang/' + lang + '.json', function (data) {
    $.each(data, function (key, val) {
      $('[name = ' + key + ']').html(val);
    });
  });
}

UpUp.start({
  'content-url': 'index.html',
  'assets': ['/img/technopolis.jpg', '/css/main.min.css', '/lang/en.json', '/lang/ru.json', '/js/scripts.min.js'],
  'service-worker-url': '/upup.sw.min.js'
});

//    
//    //Сохранение документа с расписанием
//    function download(text, name, type) {
//        var a = document.createElement("a");
//        var file = new Blob([text], {type: type});
//        a.href = URL.createObjectURL(file);
//        a.download = name;
//        a.click();
//    }