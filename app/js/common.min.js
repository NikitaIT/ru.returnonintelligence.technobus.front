/**
 * Модуль работы с гугл таблицами
 */
$(function googleApi() {

	class GoogleSpreadsheet {
		constructor(key, spreadsheetId) {
			this.key = key;
			this.spreadsheetId = spreadsheetId;
		}
		load(sheet, range, fun) {
			const googleUrl = `https://sheets.googleapis.com/v4/spreadsheets/${spreadsheetId}/values/${sheet}!${range}?key=${key}`;
			console.log("get:", googleUrl);
			$.getJSON(googleUrl, fun);
		}
	}
	class API {
		constructor(tableViewer, googleSpreadsheet) {
			this.tableViewer = tableViewer;
			this.googleSpreadsheet = googleSpreadsheet;
			if (localStorage.length == 0 || localStorage.getItem(0) == null || localStorage.getItem(1) == null) {
				this.saveToLocalStorage();
				console.log("first saveToLocalStorage()");
			} else {
				console.log("first showTimetable()");
				try {
					this.showTimetable();
				} catch (err) {
					console.error("showTimetable: ", err);
				}

				if (navigator.onLine) {
					console.log("onLine updateStorage()");
					this.updateStorage();
				};
			}
		}
		/**
   * Запрашивает с апи гугла таблицу по урлу
   * @param {string} url Адрес листа таблицы
   * @param {function} fun Что с ней делает
   */
		googleSpreadsheetLoad(sheet, range, fun) {
			this.googleSpreadsheet.load(sheet, range, function (result) {
				console.log(`Загружен обьект:`, result);
				fun(result);
			});
		}
		/**
   * Сохранение расписания в локальное хранилище
   */
		saveToLocalStorage() {
			this.googleSpreadsheetLoad("To Technopolis", "A1:H100", result => {
				console.log(result);
				localStorage.setItem(0, JSON.stringify(result));
				this.tableViewer.addTableList(result, 0);
			});
			this.googleSpreadsheetLoad("From Technopolis", "A1:H100", result => {
				localStorage.setItem(1, JSON.stringify(result));
				this.tableViewer.addTableList(result, 1);
			});
			this.googleSpreadsheetLoad("Объявления", "A1:B10", result => {
				this.tableViewer.addInfoList(result);
			});
			localStorage.setItem('DATE', Date());
		}
		/**
   * Обновление
   */
		updateStorage() {
			this.tableViewer.cleanTableList();
			this.saveToLocalStorage();
		}
		showTimetable() {
			this.tableViewer.addTableList(JSON.parse(localStorage.getItem(0)), 0);
			this.tableViewer.addTableList(JSON.parse(localStorage.getItem(1)), 1);
		}
	}
	class TableViewer {
		constructor(timetableRowClass, infoClass) {
			this.timetableRowClass = timetableRowClass;
			this.infoClass = infoClass;
		}
		/**
   * Добавляет информанию из таблицы
   * @param {object}   infoJSON  Обьект
   * @param {string} infoClass Класс в который добавляем
   */
		addInfoList(infoJSON) {
			console.log(`f: addTableList(infoJSON=`, infoJSON, `, infoClass= ${this.infoClass})`);
			let infoHtmlString = "";
			infoJSON.values.shift();
			infoJSON.values.forEach(function (msg) {
				infoHtmlString += `<p class="info-list--elem">
										<span class="info-list--elem__title">
											${msg[0]}
										</span>
										${msg[1]}
									</p>`;
			});
			$(this.infoClass).append(infoHtmlString);
		}
		/**
   * Add table list in timetable
   * @param   {object} timetableJSON     Data
   * @param   {string} timetableRowClass Table DOM class
   * @param   {number} id                Table list number
   */
		addTableList(timetableJSON, id) {
			console.log(`f: addTableList(id=${id}, timetableJSON=`, timetableJSON, `, timetableRowClass= ${this.timetableRowClass})`);
			let timetableRowHtmlString = `<div class="timetable__row__current" id="route${id}">`;
			//console.log(JSON.stringify(timetableJSON.values));
			let timetable = timetableJSON.values;
			let timeSort = {};
			timetable.shift();
			timetable.forEach(function (mins, i) {
				let [hour, min] = mins[0].split(':');
				mins.shift();
				if (timeSort[hour] == undefined) timeSort[hour] = [];
				timeSort[hour].push({ min, mins });
			});
			function compareHour(a, b) {
				if (a.hour > b.hour) return 1;
				if (a.hour < b.hour) return -1;
			}
			function compareMin(a, b) {
				if (a.min > b.min) return 1;
				if (a.min < b.min) return -1;
			}
			//timeSort = timeSort.sort(compareHour);
			for (let i = 0; i < timeSort.length; i++) {
				timeSort[i] = timeSort[i].sort(compareMin);
			}
			//console.log(JSON.stringify(timeSort));
			for (hour in timeSort) {
				let minsHtmlString = getMinsHtmlString(hour, timeSort[hour]);
				if (minsHtmlString !== "") {
					timetableRowHtmlString += `<div class="timetable__row">
									<div class="timetable__hover">
										${hour}	
									</div>
									<hr class="line"/>
									<div class="timetable__row--subrow">
										${minsHtmlString}
									</div>
								</div>`;
				}
			}
			timetableRowHtmlString += '</div>';

			/**
    * Добавляет строку минут в таблицу
    * @param   {object} mins Массив пар (Минуты:День,Id:Часы)
    * @returns {string} Строковое представление в таблице
    */
			function getMinsHtmlString(hour, mins) {
				let minsHtmlString = "";
				mins.forEach(function (min, i) {
					minsHtmlString += `<div  class="timetable__min ${getDayClassName(min.mins)}">
									${hour}:${min.min}
								</div>`;
				});
				return minsHtmlString;
				/**
     * Добавляет класс дня недели
     * @param   {string} tableDayName Название дня недели в таблице exel
     * @returns {string}   Класс дня недели
     */
				function getDayClassName(tableDayName) {
					//console.log(tableDayName);
					let minDaysClassNames = "";
					let daysExtendtion = [...days, "All"];
					for (let i = 0; i < tableDayName.length; i++) {
						if (tableDayName[i] == "") continue;
						minDaysClassNames += ' day-' + daysExtendtion[i];
					}
					if (tableDayName.length == 5) minDaysClassNames += ' day-All';
					return minDaysClassNames;
				}
			}

			$(this.timetableRowClass).append(timetableRowHtmlString);
		}
		cleanTableList() {
			$(this.timetableRowClass).html("");
		}
		cleanInfoList() {
			$(this.infoClass).html("");
		}
	};
	let url = "https://docs.google.com/spreadsheet/pub?key=1VwgzSFxVRu2Z-9tvF8wimO2m3BmuW4ngcST5uGSRYRg&output=html";
	const key = "AIzaSyC6gFH_bbSeMSIzEexKIUQ3MGE1MK2mBdo";
	const spreadsheetId = "1Xdje643qsnGXaOjU70larjh-UFTh6Bt9ii83a7t68Oo";
	const googleSpreadsheet = new GoogleSpreadsheet(key, spreadsheetId);
	const tableViewer = new TableViewer(".timetable__row__all", ".info-list");
	const apiObj = new API(tableViewer, googleSpreadsheet);
	setLanguage("ru");
});
/**
 * Модуль работы с датой
 */
$(function () {
	/**
  * Установка текущей даты, поиск следующей даты в таблице
  */
	function setDate() {
		let options = {
			hour: 'numeric',
			minute: 'numeric'
		};
		function getWeekDay(date) {
			return fullDays[date.getDay()];
		}
		let date = new Date();
		$(".day").attr('name', getWeekDay(date));
		$("time.current-time").html(date.toLocaleString('ru', options) + ' ');

		Number.prototype.div = function (by) {
			return (this - this % by) / by;
		};
		let minTmp = date.getMinutes();
		minTmp = minTmp >= 10 ? minTmp.div(10) + 1 + "0" : "10";
		$(`.timetable__min:contains(${date.getHours()}:${minTmp})`).css('border', '2px solid green');
	}
	setDate();
	setInterval(setDate, 9000);
});
/**
 * Модуль карты
 * @param {object} function ( Инициализация карты
 */
$(function () {
  /**
   * Инициализация карты
   */
  function init() {
    const places = {
      metro: [59.853876, 30.321102],
      technopolis: [59.818043, 30.327938],
      metro1: [59.850127, 30.321772],
      routeCenter: [59.835681, 30.322253]
    };
    let from = places.metro,
        to = places.technopolis;
    let myMap = new ymaps.Map('map', {
      center: places.metro,
      zoom: 16
    }, {
      searchControlProvider: 'yandex#search'

    }),
        myPlacemark = new ymaps.Placemark(myMap.getCenter());

    myMap.geoObjects.add(myPlacemark);
    let myRoute;

    function addRoute(from, to) {
      ymaps.route([{
        point: from,
        type: 'viaPoint'
      }, to]).then(function (route) {
        myMap.geoObjects.add(myRoute = route);
      }, function (error) {
        console.error('Возникла ошибка: ' + error.message);
      });
    };

    let routeButton = new ymaps.control.Button('<i class="fa fa-bus" style="color: dimgray"></i>');

    routeButton.events.add('select', function () {
      addRoute(from, to);
      myMap.setZoom(12);
      myMap.setCenter(places.routeCenter);
    }).add('deselect', function () {
      myRoute && myMap.geoObjects.remove(myRoute);
    });

    myMap.controls.add(routeButton, { float: 'left', maxWidth: 'auto' });

    myPlacemark.events.add('mouseenter', function (e) {
      // Ссылку на объект, вызвавший событие,
      // можно получить из поля 'target'.
      e.get('target').options.set('preset', 'islands#greenIcon');
    }).add('mouseleave', function (e) {
      e.get('target').options.unset('preset');
    });

    function changeRoute() {
      if (routeButton.isSelected()) {
        myRoute && myMap.geoObjects.remove(myRoute);
        addRoute(from, to);
      }
    };

    $(".from_technopolis").click(function () {
      myMap.setCenter(places.technopolis);
      myPlacemark.geometry.setCoordinates(myMap.getCenter());
      from = places.technopolis;
      to = places.metro1;
      changeRoute();
      myMap.setZoom(16);
    });

    $(".to_technopolis").click(function () {
      myMap.setCenter(places.metro);
      myPlacemark.geometry.setCoordinates(myMap.getCenter());
      from = places.metro;
      to = places.technopolis;
      changeRoute();
      myMap.setZoom(16);
    });
  }

  ymaps.ready(init);
});
/**
 * Модуль отрисовка боковой панели 
 */
$(function () {
	(function () {
		let strDOM = "";
		days.forEach(function (day, i) {
			strDOM += `<div class="panel--button panel--button-${i} day-${day}">
						<span name="${day}"></span>
					</div>`;
		});
		$(".panel").append(strDOM);
	})();
});
/**
 * Модуль установки времени показа заставки
 */
$(function () {
  // Установка времени показа заставки
  $(".preloader").delay(1000).fadeOut("slow");
});

$(".xls").click(function () {
    location.href = "https://docs.google.com/spreadsheet/pub?key=1Xdje643qsnGXaOjU70larjh-UFTh6Bt9ii83a7t68Oo&output=xls";
});

$(".pdf").click(function () {
    location.href = "https://docs.google.com/spreadsheet/pub?key=1Xdje643qsnGXaOjU70larjh-UFTh6Bt9ii83a7t68Oo&output=pdf";
});
/**
 * Модуль установки событий работы с свичём
 */
$(function () {
    $(".russian").button('toggle');
    $(".russian").click(function () {
        setLanguage("ru");
        $('#map').attr('lang', 'ru');
    });
    $(".russian").click();
    $(".english").click(function () {
        setLanguage("en");
        $('#map').attr('lang', 'en');
    });
    $(".lang").addClass("btn-group-vertical");
    $(".lang").removeClass("btn-group");
    $(".to_technopolis").button('toggle');
    $(".to_technopolis").click(function () {
        $("#route0").css("visibility", "visible");
        $("#route0").css("position", "initial");
        $("#route1").css("visibility", "hidden");
        $("#route1").css("position", "absolute");
    });
    $(".from_technopolis").click(function () {
        $("#route0").css("visibility", "hidden");
        $("#route0").css("position", "absolute");
        $("#route1").css("visibility", "visible");
        $("#route1").css("position", "initial");
    });
});
const days = ['sunday', 'monday', 'tuesday', 'tednesday', 'thursday', 'friday', 'saturday'];
const fullDays = ['fullSunday', 'fullMonday', 'fullTuesday', 'fullTednesday', 'fullThursday', 'fullFriday', 'fullSaturday'];

/**
 * Установка языка сайта
 * @param {string} lang Пользовательская локаль
 */
function setLanguage(lang) {
  $.getJSON(`lang/${lang}.json`, function (data) {
    $.each(data, function (key, val) {
      $(`[name = ${key}]`).html(val);
    });
  });
}

UpUp.start({
  'content-url': 'index.html',
  'assets': ['/img/technopolis.jpg', '/css/main.min.css', '/lang/en.json', '/lang/ru.json', '/js/scripts.min.js'],
  'service-worker-url': '/upup.sw.min.js'
});